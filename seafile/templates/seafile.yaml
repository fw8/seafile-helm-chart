{{- $clusterDomain := default "cluster.local" .Values.clusterDomain }}
{{ if .Capabilities.APIVersions.Has "apps/v1/Deployment" }}
apiVersion: apps/v1
{{ else }}
apiVersion: extensions/v1beta1
{{ end }}
kind: Deployment
metadata:
  name: {{ include "seafile.fullname" . }}
  labels:
    {{- include "seafile.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "seafile.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: webserver
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "seafile.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: webserver
    spec:

      volumes:

        - name: seafile-data
          persistentVolumeClaim:
            claimName: {{ include "seafile.claimName" . }}

      hostAliases:

        - ip: "127.0.0.1"
          hostnames:
          - "memcached"

      containers:

        - name: seafile
          image: "{{ .Values.seafile.image.repository }}:{{ .Values.seafile.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.seafile.image.pullPolicy }}
          volumeMounts:
            - name: seafile-data
              mountPath: "/shared"
          env:
            - name: SEAFILE_SERVER_HOSTNAME
              value: {{ .Values.ingress.host }}
            - name: SEAFILE_SERVER_SCHEME
              {{ if .Values.ingress.tls }}
              value: https
              {{ else }}
              value: http
              {{ end }}
            - name: SEAFILE_SERVER_LETSENCRYPT
              value: "false"
            - name: SEAFILE_ADMIN_EMAIL
              value: {{ .Values.admin.email }}
            - name: SEAFILE_ADMIN_PASSWORD
              value: {{ .Values.admin.password }}
            - name: DB_HOST
              value: {{ include "seafile.fullname" . }}-mysql
            - name: DB_ROOT_PASSWD
              value: "db_dev"
            - name: TZ
              value: {{ .Values.timezone }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
          readinessProbe:
            exec:
              command: [ "/usr/bin/curl","-s","-i","localhost:8000" ]
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", {{ .Files.Get "scripts/poststart.sh" | quote }} ]
          resources:
            {{- toYaml .Values.seafile.resources | nindent 12 }}

        - name: memcached
          image: {{ .Values.memcached.image }}
          imagePullPolicy: Always
          command: [ "memcached" ]
          args: [ "-m", "256" ]
          {{- with .Values.memcached.resources }}
          resources:
          {{- . | toYaml | nindent 10 }}
          {{- end }}
      {{- with .Values.seafile.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.seafile.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.seafile.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

  strategy:
    # This is a single-node seafile instance, so we need to shut down the old instance before starting a new
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "seafile.fullname" . }}
  labels:
    {{- include "seafile.labels" . | nindent 4 }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    {{- include "seafile.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: webserver
  